// ==UserScript==
// @name         Wayfarer Review History IDB
// @version      0.4.1
// @description  Add local review history storage to Wayfarer
// @namespace    https://github.com/tehstone/wayfarer-addons
// @downloadURL  https://github.com/tehstone/wayfarer-addons/raw/main/wayfarer-review-history-idb.user.js
// @homepageURL  https://github.com/tehstone/wayfarer-addons
// @match        https://wayfarer.nianticlabs.com/*
// @match        https://wayfarer-qa.eng.nianticlabs.com/*
// @run-at       document-start
// ==/UserScript==

// Copyright 2022 tehstone, bilde
// This file is part of the Wayfarer Addons collection.

// This script is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This script is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You can find a copy of the GNU General Public License in the root
// directory of this script's GitHub repository:
// <https://github.com/tehstone/wayfarer-addons/blob/main/LICENSE>
// If not, see <https://www.gnu.org/licenses/>.

/* eslint-env es6 */
/* eslint no-var: "error" */

(() => {
    let userHash = 0;
    const OBJECT_STORE_NAME = 'reviewHistory';

    // Spain
    const challenge_geofence =
        [[43.40995,-1.77595], [43.37427,-1.79029], [43.36654,-1.78857], [43.36442,-1.7781], [43.3525,-1.78788], [43.34886,-1.78436], [43.34781,-1.77758], [43.34457,-1.77683], [43.34335,-1.77497], [43.34324,-1.77338], [43.34209,-1.77153], [43.34252,-1.76737], [43.34335,-1.76464], [43.34415,-1.76132], [43.3441,-1.75827], [43.34273,-1.75529], [43.34084,-1.75301], [43.3387,-1.75222], [43.33602,-1.75143], [43.33505,-1.75265], [43.33346,-1.75278], [43.33193,-1.751], [43.33087,-1.74827], [43.33162,-1.74263], [43.33146,-1.74048], [43.33038,-1.73746], [43.32965,-1.73716], [43.32853,-1.73778], [43.32762,-1.73832], [43.32534,-1.73862], [43.32426,-1.73737], [43.3233,-1.73722], [43.32038,-1.73829], [43.31808,-1.74078], [43.31647,-1.74171], [43.31382,-1.73782], [43.3132,-1.73784], [43.31249,-1.73984], [43.31165,-1.74048], [43.31085,-1.73975], [43.31062,-1.7384], [43.31074,-1.73658], [43.31024,-1.73587], [43.30949,-1.73523], [43.30651,-1.7342], [43.30155,-1.73323], [43.29933,-1.73166], [43.296,-1.7302], [43.29836,-1.72536], [43.30003,-1.72428], [43.30098,-1.71991], [43.3002,-1.71381], [43.30358,-1.71029], [43.30642,-1.70883], [43.30956,-1.70379], [43.30948,-1.70049], [43.31218,-1.69652], [43.31309,-1.69411], [43.31093,-1.68817], [43.3098,-1.68635], [43.31148,-1.6824], [43.3107,-1.68055], [43.31214,-1.67497], [43.31548,-1.66905], [43.31501,-1.66558], [43.31423,-1.66339], [43.3137,-1.65686], [43.31217,-1.65309], [43.30889,-1.65043], [43.30764,-1.64583], [43.30836,-1.63961], [43.30986,-1.63515], [43.3077,-1.63043], [43.30645,-1.62352], [43.3003,-1.62159], [43.29293,-1.62729], [43.28496,-1.62978], [43.2805,-1.62686], [43.27097,-1.62506], [43.27072,-1.62313], [43.26406,-1.62212], [43.25822,-1.61689], [43.25591,-1.61346], [43.25547,-1.60955], [43.25294,-1.60805], [43.25494,-1.60058], [43.25494,-1.59402], [43.25391,-1.58878], [43.25409,-1.58131], [43.24991,-1.57543], [43.257,-1.5687], [43.27081,-1.56355], [43.27293,-1.56106], [43.27577,-1.56111], [43.27987,-1.55711], [43.28112,-1.55935], [43.28365,-1.56029], [43.28365,-1.56359], [43.28843,-1.566], [43.29227,-1.55261], [43.29255,-1.54162], [43.29189,-1.53995], [43.29546,-1.53527], [43.29411,-1.53094], [43.29261,-1.52235], [43.29424,-1.52076], [43.29439,-1.50656], [43.2918,-1.50338], [43.28843,-1.5012], [43.28765,-1.49875], [43.28171,-1.49205], [43.28402,-1.4818], [43.28068,-1.4815], [43.27684,-1.47549], [43.27549,-1.47025], [43.27177,-1.46154], [43.27171,-1.4521], [43.26771,-1.43892], [43.2674,-1.4278], [43.26949,-1.42085], [43.27402,-1.41622], [43.27346,-1.41111], [43.26946,-1.40287], [43.26727,-1.40128], [43.2664,-1.39862], [43.25896,-1.38823], [43.25299,-1.38145], [43.24511,-1.3812], [43.23233,-1.37746], [43.22895,-1.37751], [43.22545,-1.37944], [43.22457,-1.38231], [43.22079,-1.3842], [43.21854,-1.38304], [43.21441,-1.37939], [43.21078,-1.3833], [43.20721,-1.3842], [43.19936,-1.38218], [43.19617,-1.38519], [43.19317,-1.3851], [43.18957,-1.38077], [43.18757,-1.38197], [43.18562,-1.39098], [43.17845,-1.40107], [43.17501,-1.40171], [43.17116,-1.40278], [43.16036,-1.403], [43.15667,-1.40115], [43.15551,-1.40317], [43.15488,-1.40763], [43.14925,-1.41506], [43.14274,-1.40905], [43.13453,-1.41338], [43.12842,-1.41304], [43.12495,-1.41982], [43.12178,-1.42523], [43.11636,-1.42573], [43.11047,-1.44136], [43.10671,-1.4393], [43.1037,-1.44839], [43.09919,-1.4532], [43.09681,-1.4635], [43.08991,-1.46968], [43.08251,-1.46985], [43.07349,-1.4623], [43.06609,-1.45629], [43.05894,-1.45062], [43.04752,-1.44033], [43.02908,-1.35398], [43.05417,-1.3454], [43.05944,-1.34608], [43.07487,-1.34643], [43.08126,-1.34316], [43.09229,-1.34883], [43.10433,-1.33613], [43.10997,-1.33063], [43.11423,-1.31896], [43.11761,-1.29149], [43.11999,-1.27038], [43.11698,-1.26746], [43.10357,-1.28669], [43.09129,-1.29785], [43.0696,-1.30746], [43.0686,-1.29544], [43.06471,-1.29458], [43.06471,-1.28703], [43.05442,-1.26901], [43.04552,-1.26214], [43.04263,-1.24875], [43.05668,-1.23004], [43.05166,-1.20996], [43.03435,-1.18043], [43.03912,-1.17356], [43.03498,-1.1612], [43.03209,-1.15914], [43.02569,-1.14404], [43.01,-1.14129], [43.01038,-1.13597], [43.01678,-1.12481], [43.02506,-1.11331], [43.01791,-1.10541], [43.01189,-1.09305], [43.01189,-1.08241], [43.0036,-1.08327], [42.9977,-1.06216], [42.99519,-1.03194], [42.99243,-1.02525], [42.99594,-1.01632], [42.98967,-1.00482], [42.97623,-0.99795], [42.97083,-0.97993], [42.96316,-0.9722], [42.96078,-0.95882], [42.9545,-0.94457], [42.95349,-0.93289], [42.95588,-0.92208], [42.95952,-0.92053], [42.96593,-0.9135], [42.96291,-0.89788], [42.95651,-0.89582], [42.95676,-0.88294], [42.95525,-0.8723], [42.95148,-0.86303], [42.95286,-0.84535], [42.95512,-0.83556], [42.95161,-0.8129], [42.95827,-0.80174], [42.96568,-0.79127], [42.96656,-0.77205], [42.9702,-0.7681], [42.96907,-0.75042], [42.94872,-0.7396], [42.94608,-0.72913], [42.94005,-0.73342], [42.93917,-0.72948], [42.93276,-0.73308], [42.92748,-0.72948], [42.92358,-0.72381], [42.91906,-0.72295], [42.91327,-0.73342], [42.89869,-0.72982], [42.89315,-0.72536], [42.88747,-0.71672], [42.88583,-0.71054], [42.88545,-0.70333], [42.87929,-0.69685], [42.88269,-0.68946], [42.88571,-0.67693], [42.87992,-0.67436], [42.87615,-0.66526], [42.86885,-0.65959], [42.86508,-0.66045], [42.85841,-0.6529], [42.85425,-0.6414], [42.85287,-0.6335], [42.83978,-0.62063], [42.8321,-0.60123], [42.82744,-0.59969], [42.82707,-0.60295], [42.81498,-0.59711], [42.80616,-0.59866], [42.80364,-0.59179], [42.80931,-0.57514], [42.80629,-0.56638], [42.79898,-0.56312], [42.78954,-0.56982], [42.78208,-0.56805], [42.77868,-0.55157], [42.79392,-0.54487], [42.79455,-0.53801], [42.79279,-0.5308], [42.79745,-0.52496], [42.81155,-0.5265], [42.81886,-0.51844], [42.82742,-0.50848], [42.82855,-0.49973], [42.82226,-0.49749], [42.81772,-0.49131], [42.81647,-0.48307], [42.81055,-0.47655], [42.80614,-0.46385], [42.80425,-0.452], [42.79619,-0.44273], [42.80853,-0.41183], [42.80803,-0.4072], [42.80564,-0.40583], [42.80035,-0.3933], [42.80211,-0.38385], [42.80752,-0.3842], [42.81244,-0.37561], [42.81483,-0.36789], [42.81911,-0.36394], [42.82238,-0.36514], [42.82931,-0.35622], [42.83258,-0.35553], [42.8395,-0.34523], [42.83749,-0.34111], [42.83862,-0.33407], [42.83434,-0.32824], [42.83661,-0.32257], [42.84328,-0.32068], [42.85008,-0.31364], [42.8419,-0.30592], [42.83963,-0.29751], [42.83686,-0.27622], [42.82994,-0.27382], [42.82389,-0.26112], [42.81974,-0.25665], [42.82075,-0.24618], [42.82591,-0.2424], [42.81495,-0.23691], [42.80954,-0.23828], [42.80249,-0.22387], [42.80349,-0.22026], [42.80123,-0.217], [42.79644,-0.21442], [42.79833,-0.20842], [42.79581,-0.19709], [42.79077,-0.18764], [42.7875,-0.18747], [42.78775,-0.18129], [42.78662,-0.17734], [42.79014,-0.17031], [42.79783,-0.16258], [42.79921,-0.16018], [42.79329,-0.15331], [42.78397,-0.15417], [42.77717,-0.14662], [42.77288,-0.14662], [42.77276,-0.14954], [42.77011,-0.14902], [42.76847,-0.14078], [42.7662,-0.13632], [42.76104,-0.13374], [42.75814,-0.12825], [42.75171,-0.12173], [42.74225,-0.11572], [42.73872,-0.11658], [42.73469,-0.10851], [42.73053,-0.10645], [42.72485,-0.11057], [42.72195,-0.10662], [42.72296,-0.09718], [42.72183,-0.08551], [42.71893,-0.08293], [42.71779,-0.07727], [42.71893,-0.06851], [42.71085,-0.06285], [42.69774,-0.06268], [42.69345,-0.0565], [42.69534,-0.0474], [42.69281,-0.04293], [42.69218,-0.03281], [42.686,-0.01478], [42.68663,0.00237], [42.68966,0.00461], [42.69458,0.01405], [42.70266,0.01405], [42.70354,0.02606], [42.6966,0.04838], [42.69912,0.05387], [42.69837,0.05868], [42.70152,0.06366], [42.70442,0.07018], [42.70959,0.07155], [42.71565,0.07688], [42.71754,0.08992], [42.71199,0.10451], [42.71186,0.1131], [42.71376,0.11979], [42.7154,0.13095], [42.72309,0.1361], [42.72599,0.15618], [42.72397,0.16099], [42.73015,0.16236], [42.73431,0.17146], [42.73772,0.17551], [42.73582,0.18632], [42.73204,0.19696], [42.72939,0.20572], [42.7241,0.21568], [42.71678,0.22632], [42.72006,0.22821], [42.71817,0.25756], [42.71451,0.26168], [42.70001,0.26941], [42.69307,0.26563], [42.68966,0.27559], [42.68461,0.28022], [42.67477,0.29533], [42.67856,0.30151], [42.68209,0.31249], [42.68436,0.31284], [42.68474,0.32108], [42.69105,0.32108], [42.69837,0.32537], [42.70581,0.32485], [42.71174,0.34408], [42.71855,0.35197], [42.72561,0.36073], [42.71867,0.37326], [42.7159,0.37412], [42.71376,0.38305], [42.71464,0.39437], [42.70404,0.39523], [42.699,0.39918], [42.69673,0.40433], [42.69471,0.42115], [42.69181,0.42476], [42.69181,0.43489], [42.69206,0.44742], [42.69521,0.45222], [42.69395,0.45823], [42.69496,0.46682], [42.70114,0.47179], [42.69975,0.48621], [42.69307,0.49531], [42.69281,0.51419], [42.69471,0.51917], [42.69912,0.52089], [42.70417,0.53016], [42.70089,0.53617], [42.70114,0.54115], [42.70165,0.54492], [42.70001,0.55659], [42.69824,0.56775], [42.6966,0.57685], [42.69622,0.58852], [42.70556,0.5947], [42.70657,0.59797], [42.69988,0.60723], [42.69774,0.61685], [42.69572,0.61994], [42.69584,0.62938], [42.69294,0.64054], [42.69509,0.64809], [42.69155,0.66011], [42.69168,0.66508], [42.68979,0.66835], [42.6913,0.67487], [42.70064,0.67298], [42.70669,0.68071], [42.71691,0.67212], [42.72385,0.67779], [42.72788,0.67538], [42.73065,0.66989], [42.73998,0.66611], [42.74213,0.66337], [42.74831,0.66199], [42.75108,0.66011], [42.75133,0.64569], [42.75473,0.64054], [42.7565,0.6462], [42.76217,0.65067], [42.76519,0.64861], [42.76847,0.65564], [42.77124,0.66337], [42.7749,0.66526], [42.77729,0.65118], [42.78334,0.64414], [42.78573,0.64723], [42.78607,0.6504], [42.79375,0.65452], [42.79929,0.6595], [42.79967,0.66465], [42.80332,0.66911], [42.81025,0.66722], [42.81466,0.66362], [42.82259,0.66911], [42.82989,0.66053], [42.8387,0.65778], [42.84298,0.66379], [42.8484,0.6789], [42.85582,0.67684], [42.85708,0.69675], [42.86199,0.70774], [42.86111,0.71357], [42.85821,0.71718], [42.85821,0.72147], [42.85821,0.72988], [42.85494,0.73537], [42.8494,0.73658], [42.84399,0.76318], [42.84122,0.76353], [42.83619,0.77898], [42.83694,0.78893], [42.84135,0.79734], [42.83795,0.81846], [42.83342,0.82361], [42.82889,0.83459], [42.82914,0.84026], [42.83002,0.84335], [42.82624,0.85931], [42.82372,0.85948], [42.81692,0.86996], [42.81592,0.87493], [42.81428,0.87785], [42.81428,0.88506], [42.81164,0.88832], [42.80798,0.8945], [42.80761,0.89777], [42.8037,0.90257], [42.80093,0.90686], [42.79728,0.90806], [42.79703,0.91527], [42.79438,0.91768], [42.79022,0.92592], [42.78954,0.93323], [42.79257,0.9346], [42.79811,0.93907], [42.80264,0.95108], [42.8073,0.96138], [42.80365,0.96705], [42.8,0.96876], [42.79584,0.97838], [42.7932,0.97906], [42.79131,0.97872], [42.7869,0.98421], [42.7874,0.99057], [42.78891,0.99915], [42.79131,1.00516], [42.79005,1.0091], [42.78866,1.01597], [42.78677,1.02249], [42.78589,1.03245], [42.78791,1.03485], [42.78576,1.04464], [42.78148,1.04447], [42.78312,1.05391], [42.78261,1.05751], [42.78387,1.05906], [42.78274,1.07279], [42.78929,1.07725], [42.78803,1.08172], [42.78375,1.08429], [42.77884,1.0879], [42.77468,1.09717], [42.77115,1.10987], [42.7656,1.11245], [42.76397,1.11914], [42.7501,1.13459], [42.74443,1.13081], [42.73926,1.13253], [42.73737,1.13528], [42.73371,1.13579], [42.72879,1.13373], [42.72615,1.13854], [42.72123,1.15021], [42.71,1.16549], [42.70912,1.17424], [42.71265,1.17613], [42.71442,1.18351], [42.71883,1.18935], [42.71782,1.19381], [42.71921,1.20137], [42.72098,1.20566], [42.72186,1.21321], [42.72085,1.21664], [42.72337,1.22094], [42.72476,1.22557], [42.72867,1.22969], [42.72753,1.23467], [42.72577,1.23553], [42.72514,1.24136], [42.72274,1.24548], [42.72236,1.24943], [42.71555,1.25424], [42.71593,1.26625], [42.71808,1.26711], [42.71871,1.27672], [42.71429,1.27827], [42.72022,1.29423], [42.71883,1.31037], [42.71959,1.31707], [42.72463,1.32496], [42.72489,1.33595], [42.71908,1.33869], [42.7206,1.35483], [42.71959,1.35947], [42.71492,1.35912], [42.71114,1.35329], [42.70332,1.35157], [42.70117,1.35414], [42.69865,1.36067], [42.69676,1.3641], [42.69613,1.37062], [42.69625,1.37732], [42.69184,1.3835], [42.68868,1.38985], [42.6849,1.39036], [42.68149,1.38865], [42.67733,1.38865], [42.67392,1.39002], [42.66862,1.38848], [42.66824,1.39654], [42.66571,1.40204], [42.65789,1.4053], [42.65726,1.41062], [42.65524,1.41405], [42.65107,1.41594], [42.64476,1.4156], [42.64046,1.41835], [42.6368,1.41749], [42.63188,1.42109], [42.62506,1.42109], [42.62098,1.42754], [42.61783,1.43028], [42.61176,1.4296], [42.60646,1.4356], [42.60443,1.43852], [42.60469,1.44316], [42.60241,1.44367], [42.5947,1.4423], [42.5918,1.43698], [42.58725,1.432], [42.587,1.42788], [42.58245,1.42874], [42.57714,1.43183], [42.57436,1.43526], [42.57195,1.44487], [42.56715,1.44556], [42.56247,1.44024], [42.55805,1.42633], [42.55463,1.42324], [42.54704,1.42067], [42.54363,1.41947], [42.5387,1.41483], [42.53642,1.41449], [42.53655,1.41844], [42.54034,1.42685], [42.54414,1.44196], [42.54123,1.44848], [42.53996,1.45208], [42.53591,1.45346], [42.53212,1.45174], [42.52187,1.46152], [42.50973,1.46873], [42.49998,1.45346], [42.4958,1.44951], [42.49315,1.43749], [42.4934,1.42479], [42.49137,1.41741], [42.48682,1.40951], [42.48441,1.40985], [42.4853,1.41603], [42.48302,1.41861], [42.48277,1.4332], [42.47542,1.44196], [42.46453,1.44075], [42.45947,1.44865], [42.45428,1.44196], [42.45187,1.44281], [42.44782,1.44573], [42.44326,1.4471], [42.44382,1.44394], [42.43837,1.45046], [42.43723,1.45922], [42.43609,1.47329], [42.43318,1.48393], [42.43343,1.50213], [42.429,1.51501], [42.43318,1.52874], [42.43318,1.55208], [42.44357,1.55311], [42.44445,1.55826], [42.45484,1.55844], [42.45915,1.56015], [42.45915,1.5641], [42.46003,1.56719], [42.45231,1.57474], [42.45015,1.58058], [42.46155,1.5859], [42.46446,1.59036], [42.46763,1.60032], [42.46484,1.60667], [42.46598,1.6156], [42.4651,1.61989], [42.46636,1.62195], [42.46383,1.63088], [42.4675,1.63397], [42.46826,1.63757], [42.46712,1.64032], [42.46928,1.64667], [42.46801,1.64924], [42.46864,1.6568], [42.47168,1.658], [42.47346,1.66109], [42.47814,1.65972], [42.48168,1.66075], [42.49384,1.66263], [42.49662,1.69267], [42.48966,1.70383], [42.49004,1.70744], [42.49637,1.71585], [42.50017,1.71791], [42.50371,1.72718], [42.49282,1.73147], [42.49536,1.73937], [42.49637,1.74812], [42.49244,1.75327], [42.4908,1.76014], [42.48662,1.76426], [42.48586,1.79172], [42.49093,1.80477], [42.48662,1.81009], [42.48384,1.81679], [42.48751,1.82365], [42.48409,1.8276], [42.48358,1.83498], [42.48168,1.83567], [42.47662,1.84494], [42.46788,1.84854], [42.46573,1.85352], [42.46396,1.8561], [42.46345,1.85953], [42.46776,1.86348], [42.45953,1.88339], [42.4499,1.88562], [42.45041,1.89077], [42.44775,1.8918], [42.44851,1.89489], [42.45041,1.89592], [42.45066,1.90073], [42.44825,1.91], [42.44673,1.91841], [42.45484,1.933], [42.45459,1.93798], [42.44369,1.94347], [42.45383,1.95901], [42.45756,1.95575], [42.46902,1.95909], [42.47928,1.96287], [42.4813,1.97145], [42.48542,1.9718], [42.4858,1.97712], [42.49156,1.97686], [42.49548,1.97858], [42.49396,1.99034], [42.48491,1.99935], [42.4839,1.99343], [42.4739,1.98716], [42.47029,1.98836], [42.46624,1.99222], [42.46301,1.99274], [42.46035,1.99815], [42.45693,2.00647], [42.4563,2.01085], [42.45376,2.01222], [42.45199,2.0148], [42.44813,2.01334], [42.44775,2.00647], [42.44648,2.00244], [42.44673,1.98227], [42.45117,1.96999], [42.453,1.95952], [42.45383,1.95901], [42.44369,1.94347], [42.438,1.94288], [42.43179,1.9409], [42.42979,1.94189], [42.42869,1.94369], [42.42742,1.95142], [42.42625,1.95541], [42.42409,1.9588], [42.4105,1.95562], [42.40404,1.96103], [42.40008,1.96189], [42.39545,1.96017], [42.39209,1.96051], [42.39044,1.9618], [42.38879,1.96403], [42.3881,1.96506], [42.38524,1.96429], [42.38169,1.96515], [42.37985,1.96704], [42.37687,1.97004], [42.37358,1.97262], [42.37155,1.97991], [42.36229,1.98609], [42.36172,1.98824], [42.3602,1.98978], [42.35924,1.99218], [42.36026,1.99424], [42.35893,1.99742], [42.35595,1.99871], [42.35544,2.00094], [42.35614,2.00317], [42.35309,2.00721], [42.35297,2.01304], [42.34973,2.01278], [42.34757,2.01536], [42.35487,2.02197], [42.35588,2.02368], [42.35607,2.02823], [42.35861,2.03278], [42.35785,2.03553], [42.35766,2.04883], [42.35893,2.05621], [42.35772,2.0587], [42.36223,2.06694], [42.36146,2.06797], [42.36533,2.07244], [42.36521,2.07467], [42.36533,2.08085], [42.36261,2.08454], [42.36444,2.08668], [42.3666,2.08626], [42.37066,2.08668], [42.37142,2.08789], [42.37421,2.08935], [42.37637,2.09561], [42.37732,2.0987], [42.38068,2.10531], [42.37947,2.10746], [42.38163,2.1102], [42.38176,2.11329], [42.38372,2.11621], [42.38702,2.11458], [42.39076,2.11406], [42.39513,2.11492], [42.39703,2.12084], [42.4066,2.1229], [42.41224,2.12754], [42.4156,2.13587], [42.41655,2.14059], [42.417,2.14265], [42.41858,2.14531], [42.42023,2.14797], [42.42207,2.15337], [42.42416,2.15638], [42.42283,2.15852], [42.42327,2.16565], [42.42555,2.16762], [42.42371,2.16968], [42.42226,2.17535], [42.41871,2.18033], [42.41852,2.18342], [42.41858,2.19492], [42.41668,2.20032], [42.4175,2.20573], [42.41985,2.20693], [42.42054,2.2108], [42.42238,2.21363], [42.4234,2.215], [42.42321,2.21946], [42.42599,2.22341], [42.42707,2.23054], [42.42631,2.23431], [42.42897,2.24015], [42.42897,2.24539], [42.43208,2.24813], [42.43341,2.25045], [42.43702,2.25191], [42.43885,2.2574], [42.43765,2.26212], [42.43588,2.26384], [42.43372,2.26727], [42.43467,2.27122], [42.42688,2.28607], [42.42308,2.29173], [42.42378,2.30032], [42.42713,2.30495], [42.42878,2.30581], [42.42922,2.30873], [42.42808,2.31439], [42.42568,2.31903], [42.42194,2.31954], [42.41782,2.32486], [42.41706,2.32993], [42.41586,2.33156], [42.41649,2.33491], [42.41681,2.33903], [42.41731,2.34486], [42.40952,2.34649], [42.4066,2.35121], [42.40369,2.3598], [42.40191,2.36993], [42.40103,2.37207], [42.40198,2.38074], [42.40052,2.38294], [42.40077,2.38758], [42.39684,2.39195], [42.39659,2.3953], [42.39488,2.3959], [42.39526,2.40037], [42.39329,2.40491], [42.39304,2.40861], [42.39133,2.4129], [42.39348,2.41788], [42.39317,2.42139], [42.39418,2.4268], [42.39431,2.43264], [42.39253,2.43547], [42.38594,2.43581], [42.37922,2.4341], [42.37776,2.43461], [42.37573,2.43667], [42.3699,2.44637], [42.37015,2.45478], [42.36717,2.45693], [42.36381,2.45787], [42.3614,2.46671], [42.3588,2.46774], [42.35582,2.4698], [42.35531,2.47169], [42.35017,2.47349], [42.34878,2.47504], [42.3484,2.47658], [42.34586,2.47667], [42.3399,2.48328], [42.34129,2.48551], [42.34085,2.48663], [42.34313,2.49281], [42.34256,2.49358], [42.34358,2.49976], [42.34186,2.50414], [42.34155,2.5068], [42.33952,2.51109], [42.33749,2.51229], [42.33577,2.51941], [42.33469,2.5225], [42.33305,2.53083], [42.33406,2.53495], [42.33362,2.54173], [42.34028,2.54456], [42.3399,2.54937], [42.34205,2.54971], [42.3432,2.55143], [42.34459,2.55117], [42.34637,2.55349], [42.34853,2.55314], [42.35398,2.55349], [42.35493,2.56087], [42.35747,2.56138], [42.35679,2.56861], [42.35856,2.5711], [42.35818,2.57891], [42.35742,2.58235], [42.35742,2.58861], [42.35406,2.5881], [42.35311,2.59325], [42.35235,2.5978], [42.35254,2.60054], [42.34981,2.60149], [42.34867,2.6087], [42.34734,2.6105], [42.34588,2.62337], [42.34708,2.62973], [42.34645,2.63385], [42.3455,2.6335], [42.34417,2.63522], [42.34423,2.63814], [42.34505,2.64329], [42.34461,2.65247], [42.34309,2.65548], [42.34214,2.6553], [42.3415,2.66578], [42.34163,2.67101], [42.34264,2.67539], [42.34645,2.67642], [42.34797,2.67444], [42.35381,2.6753], [42.35812,2.67204], [42.36097,2.66895], [42.36218,2.6644], [42.36592,2.6602], [42.36998,2.66105], [42.3722,2.662], [42.37404,2.66071], [42.37791,2.66037], [42.38336,2.65393], [42.3852,2.6511], [42.38805,2.65118], [42.389,2.6535], [42.38881,2.65685], [42.38653,2.66311], [42.38634,2.66706], [42.38742,2.6705], [42.39287,2.6717], [42.40009,2.6729], [42.40314,2.67092], [42.40586,2.67401], [42.40745,2.68294], [42.40662,2.6911], [42.40732,2.69333], [42.41131,2.69667], [42.41163,2.70097], [42.41258,2.70354], [42.41537,2.70629], [42.41787,2.71052], [42.42256,2.71747], [42.4237,2.72983], [42.42541,2.73369], [42.42408,2.73695], [42.42433,2.74107], [42.42579,2.74425], [42.42611,2.75678], [42.42465,2.75875], [42.42028,2.75901], [42.41749,2.76236], [42.41698,2.76519], [42.41229,2.77077], [42.41343,2.77283], [42.41312,2.77575], [42.41242,2.77755], [42.41806,2.78407], [42.41907,2.7987], [42.42129,2.80179], [42.42275,2.80042], [42.42592,2.80093], [42.43016,2.80359], [42.43308,2.80351], [42.43206,2.80642], [42.43155,2.80891], [42.43586,2.81157], [42.43732,2.81381], [42.4403,2.81492], [42.44087,2.8193], [42.43954,2.82599], [42.44277,2.82968], [42.44954,2.83363], [42.45176,2.8314], [42.45296,2.83192], [42.45512,2.83544], [42.45638,2.83535], [42.45999,2.8393], [42.45499,2.85655], [42.45524,2.86101], [42.4605,2.86385], [42.46373,2.86307], [42.46677,2.86676], [42.46797,2.87037], [42.46632,2.8762], [42.46335,2.88007], [42.46139,2.88153], [42.46025,2.88513], [42.46215,2.88951], [42.46221,2.89226], [42.46031,2.89938], [42.45733,2.90453], [42.45771,2.91105], [42.45651,2.91792], [42.45822,2.92127], [42.45898,2.92418], [42.46284,2.92504], [42.4643,2.9241], [42.46677,2.92676], [42.47449,2.93122], [42.47588,2.93714], [42.47747,2.93757], [42.48013,2.94564], [42.48316,2.94727], [42.48076,2.94839], [42.47842,2.95114], [42.47506,2.9592], [42.47297,2.96186], [42.46993,2.96332], [42.46803,2.96598], [42.46588,2.96701], [42.46784,2.97697], [42.46765,2.98083], [42.46974,2.98221], [42.47202,2.98264], [42.47443,2.98967], [42.4738,2.99319], [42.47405,2.99748], [42.47259,3.00263], [42.47076,3.00392], [42.46981,3.00744], [42.46734,3.01302], [42.46943,3.01662], [42.47234,3.02263], [42.47285,3.0277], [42.475,3.03027], [42.47525,3.03259], [42.47373,3.03602], [42.47481,3.04074], [42.46905,3.04289], [42.46537,3.04486], [42.45619,3.04855], [42.45499,3.05121], [42.44954,3.05516], [42.44593,3.05988], [42.44473,3.0652], [42.44207,3.06752], [42.43609,3.07045], [42.43552,3.07706], [42.43159,3.07809], [42.42899,3.08127], [42.42608,3.08582], [42.42557,3.09509], [42.42608,3.10024], [42.42754,3.10204], [42.42918,3.10264], [42.43127,3.10624], [42.43527,3.10899], [42.43603,3.11242], [42.43685,3.11637], [42.43869,3.12169], [42.43774,3.12195], [42.43622,3.12401], [42.43552,3.13234], [42.43641,3.13422], [42.43482,3.14075], [42.43375,3.1465], [42.43584,3.15233], [42.43609,3.15422], [42.43463,3.15611], [42.43476,3.15886], [42.43577,3.16092], [42.43647,3.16366], [42.43533,3.16632], [42.43596,3.16976], [42.43514,3.17474], [42.28229,5.64228], [38.51476,5.18086], [35.97901,-2.72929], [36.15289,-5.33875], [36.1551,-5.34544], [36.1549,-5.35338], [36.15215,-5.37112], [36.12782,-5.39182], [35.98352,-5.42604], [35.89819,-5.73125], [36.2296,-7.18701], [37.16716,-7.39363], [37.18289,-7.40822], [37.22801,-7.41388], [37.24004,-7.42109], [37.24578,-7.43191], [37.2578,-7.43397], [37.27271,-7.42091], [37.29046,-7.43525], [37.30426,-7.43816], [37.31156,-7.44194], [37.32883,-7.43911], [37.34207,-7.44494], [37.34944,-7.44323], [37.35749,-7.43619], [37.39207,-7.44065], [37.40233,-7.45037], [37.4056,-7.4599], [37.40963,-7.46239], [37.41426,-7.46136], [37.4146,-7.44951], [37.41829,-7.44574], [37.42081,-7.44625], [37.42537,-7.45424], [37.43205,-7.45921], [37.44691,-7.45853], [37.45086,-7.45647], [37.45693,-7.46007], [37.46204,-7.46668], [37.47212,-7.46977], [37.4805,-7.46883], [37.48438,-7.46359], [37.48962,-7.46514], [37.49425,-7.47183], [37.49534,-7.48119], [37.49895,-7.48445], [37.50985,-7.492], [37.52006,-7.4908], [37.52319,-7.49363], [37.52326,-7.49852], [37.52244,-7.50359], [37.52306,-7.50985], [37.5253,-7.51234], [37.54075,-7.51337], [37.54722,-7.52075], [37.55525,-7.5229], [37.55865,-7.52067], [37.56021,-7.51749], [37.55681,-7.50659], [37.56763,-7.50874], [37.56777,-7.51612], [37.57402,-7.51372], [37.57845,-7.50187], [37.58763,-7.50161], [37.59457,-7.49595], [37.59987,-7.50247], [37.60681,-7.50324], [37.60715,-7.49406], [37.60354,-7.49054], [37.6049,-7.48814], [37.61061,-7.48573], [37.6168,-7.48325], [37.61809,-7.47998], [37.62272,-7.48299], [37.6253,-7.47904], [37.62469,-7.47097], [37.63318,-7.47097], [37.63685,-7.46986], [37.63883,-7.46556], [37.64372,-7.46402], [37.64916,-7.46762], [37.65024,-7.46582], [37.64691,-7.45707], [37.64712,-7.45398], [37.65024,-7.45346], [37.65507,-7.45449], [37.65928,-7.45072], [37.65935,-7.45466], [37.66241,-7.45578], [37.6637,-7.45363], [37.66431,-7.44385], [37.66694,-7.44488], [37.66836,-7.44648], [37.67551,-7.44933], [37.67719,-7.45231], [37.67852,-7.45171], [37.68193,-7.44718], [37.68521,-7.44663], [37.68689,-7.44454], [37.68918,-7.44405], [37.69484,-7.44598], [37.69633,-7.44774], [37.69898,-7.44686], [37.70073,-7.44493], [37.70192,-7.44379], [37.70192,-7.44326], [37.70142,-7.44225], [37.69981,-7.44148], [37.69971,-7.44034], [37.70068,-7.43927], [37.70265,-7.4395], [37.70429,-7.43963], [37.70535,-7.44047], [37.70912,-7.43937], [37.71399,-7.43748], [37.71669,-7.43598], [37.71818,-7.43618], [37.71937,-7.43544], [37.71994,-7.4337], [37.71994,-7.43201], [37.72142,-7.43083], [37.72665,-7.42982], [37.73142,-7.42786], [37.73446,-7.42613], [37.73534,-7.42681], [37.73678,-7.42862], [37.74014,-7.42874], [37.74119,-7.42829], [37.74185,-7.42681], [37.74336,-7.41913], [37.74552,-7.41797], [37.74891,-7.41879], [37.75251,-7.421], [37.75506,-7.42264], [37.7581,-7.42161], [37.75945,-7.42076], [37.75949,-7.41966], [37.75905,-7.41509], [37.76034,-7.41256], [37.76295,-7.40996], [37.76692,-7.40885], [37.76719,-7.40541], [37.76663,-7.40192], [37.76417,-7.39926], [37.76387,-7.39715], [37.76553,-7.39481], [37.7704,-7.39202], [37.77328,-7.38816], [37.77409,-7.3849], [37.77492,-7.38215], [37.77983,-7.38037], [37.78356,-7.37688], [37.78641,-7.36979], [37.7926,-7.3661], [37.79346,-7.36381], [37.79351,-7.36117], [37.79577,-7.35849], [37.79884,-7.35716], [37.80083,-7.3512], [37.80333,-7.348], [37.80508,-7.34723], [37.80591,-7.34577], [37.80671,-7.34128], [37.81059,-7.33668], [37.81365,-7.33073], [37.81401,-7.3279], [37.81545,-7.3249], [37.81906,-7.32108], [37.82409,-7.32003], [37.82721,-7.31505], [37.83511,-7.31076], [37.83735,-7.30876], [37.83958,-7.30322], [37.84323,-7.30026], [37.84719,-7.30041], [37.85205,-7.2981], [37.85668,-7.29773], [37.85987,-7.29288], [37.86127,-7.28938], [37.8651,-7.28674], [37.86767,-7.28524], [37.86896,-7.28342], [37.87176,-7.2825], [37.87477,-7.28187], [37.87625,-7.27926], [37.87789,-7.28003], [37.88066,-7.28078], [37.8811,-7.28147], [37.88276,-7.28106], [37.88493,-7.28153], [37.88612,-7.28237], [37.89093,-7.28273], [37.89287,-7.2822], [37.89621,-7.28241], [37.89807,-7.2819], [37.8986,-7.28082], [37.89838,-7.27919], [37.89834,-7.27709], [37.89868,-7.27449], [37.89956,-7.27329], [37.90156,-7.27494], [37.90483,-7.27393], [37.90637,-7.26936], [37.91006,-7.26756], [37.91216,-7.26816], [37.91333,-7.26696], [37.91438,-7.26484], [37.91817,-7.26119], [37.91925,-7.26198], [37.92071,-7.26121], [37.92377,-7.26207], [37.92452,-7.26162], [37.92436,-7.26065], [37.92211,-7.25891], [37.92203,-7.25565], [37.9236,-7.25482], [37.92572,-7.25501], [37.92716,-7.25617], [37.9336,-7.25761], [37.93596,-7.25456], [37.9385,-7.25308], [37.94098,-7.25244], [37.94471,-7.25218], [37.94545,-7.25424], [37.94829,-7.25209], [37.94836,-7.25029], [37.95303,-7.24969], [37.95513,-7.24737], [37.96,-7.25141], [37.96454,-7.25012], [37.96677,-7.24909], [37.97658,-7.25939], [37.97814,-7.26196], [37.97976,-7.26205], [37.97962,-7.25956], [37.98071,-7.25802], [37.98192,-7.25441], [37.9849,-7.25278], [37.98571,-7.24918], [37.98815,-7.24746], [37.98937,-7.24797], [37.99099,-7.24566], [37.99038,-7.23733], [37.98916,-7.23115], [37.99058,-7.23158], [37.98903,-7.22806], [37.98815,-7.22737], [37.98957,-7.22265], [37.99248,-7.21819], [37.99511,-7.21742], [37.99654,-7.21459], [37.99748,-7.20669], [38.00005,-7.2072], [38.00377,-7.20257], [38.00323,-7.19759], [38.00168,-7.19613], [38.00161,-7.19287], [38.00357,-7.18832], [38.00201,-7.18506], [37.99728,-7.18343], [37.99856,-7.17691], [37.9966,-7.17485], [37.99376,-7.17322], [37.99687,-7.16429], [37.99532,-7.15751], [37.99856,-7.15184], [38.00262,-7.14893], [38.00357,-7.14481], [37.99958,-7.13639], [38.00594,-7.12215], [38.00891,-7.12644], [38.01013,-7.13004], [38.01946,-7.12841], [38.02135,-7.1333], [38.02372,-7.13124], [38.0225,-7.12627], [38.02507,-7.12609], [38.02744,-7.12918], [38.03089,-7.12815], [38.03366,-7.12026], [38.03183,-7.11837], [38.03778,-7.11459], [38.03778,-7.11013], [38.04123,-7.1085], [38.04481,-7.09854], [38.04116,-7.09202], [38.04028,-7.08979], [38.03819,-7.08987], [38.03765,-7.0849], [38.03576,-7.08086], [38.03447,-7.07511], [38.03305,-7.07468], [38.03447,-7.07048], [38.03386,-7.06696], [38.02778,-7.06661], [38.02893,-7.06524], [38.02697,-7.06215], [38.02048,-7.06335], [38.01743,-7.05915], [38.01953,-7.05666], [38.0177,-7.04799], [38.0152,-7.04704], [38.01432,-7.04447], [38.01791,-7.04207], [38.01811,-7.03898], [38.02102,-7.03417], [38.02433,-7.0279], [38.02548,-7.02293], [38.02203,-7.01846], [38.02115,-7.00645], [38.02318,-7.00499], [38.02325,-7.00284], [38.03156,-7.00353], [38.03528,-6.99992], [38.04346,-7.00318], [38.05009,-6.99988], [38.05468,-6.9907], [38.06854,-6.99095], [38.07583,-6.98735], [38.08516,-6.98984], [38.09833,-6.98984], [38.1048,-6.98692], [38.10345,-6.98357], [38.10541,-6.97739], [38.10973,-6.97447], [38.11014,-6.9725], [38.11581,-6.97293], [38.12317,-6.96872], [38.12925,-6.96589], [38.1339,-6.96443], [38.13343,-6.96031], [38.13714,-6.95894], [38.13924,-6.96108], [38.1418,-6.96126], [38.14612,-6.95885], [38.14956,-6.95937], [38.15159,-6.95808], [38.15166,-6.95465], [38.1528,-6.95259], [38.15442,-6.95387], [38.1555,-6.95679], [38.15523,-6.96057], [38.15395,-6.96246], [38.1603,-6.96984], [38.1663,-6.96915], [38.16833,-6.96692], [38.16877,-6.96561], [38.17316,-6.96321], [38.17964,-6.96064], [38.18868,-6.95188], [38.19401,-6.94278], [38.19947,-6.93712], [38.2019,-6.93454], [38.20831,-6.93197], [38.20835,-6.9341], [38.20686,-6.9347], [38.20653,-6.93762], [38.20774,-6.93848], [38.21442,-6.93788], [38.21968,-6.93573], [38.22082,-6.93607], [38.21927,-6.93899], [38.21759,-6.94277], [38.21165,-6.9462], [38.21219,-6.94972], [38.21347,-6.94972], [38.21536,-6.94792], [38.21732,-6.94749], [38.21779,-6.94929], [38.21765,-6.95212], [38.21644,-6.95427], [38.21671,-6.95693], [38.21469,-6.95839], [38.20774,-6.96594], [38.20578,-6.96826], [38.20383,-6.96903], [38.20181,-6.97229], [38.20646,-6.97796], [38.21098,-6.98002], [38.21098,-6.98311], [38.20895,-6.98474], [38.20363,-6.99512], [38.20248,-7.00259], [38.20403,-7.00508], [38.2041,-7.0116], [38.19843,-7.00903], [38.19567,-7.00989], [38.19526,-7.01238], [38.19722,-7.01598], [38.19627,-7.01701], [38.19439,-7.0165], [38.19135,-7.01693], [38.18811,-7.0207], [38.18609,-7.02113], [38.18481,-7.02293], [38.18191,-7.02946], [38.18481,-7.03615], [38.18622,-7.03744], [38.18683,-7.04379], [38.18359,-7.04559], [38.18137,-7.04637], [38.1788,-7.05117], [38.17988,-7.05495], [38.17718,-7.05924], [38.17846,-7.06053], [38.18056,-7.06001], [38.18305,-7.05606], [38.18582,-7.05709], [38.18562,-7.06207], [38.18643,-7.06611], [38.18521,-7.06568], [38.18285,-7.0649], [38.17887,-7.06576], [38.17725,-7.0686], [38.17604,-7.07495], [38.17374,-7.07855], [38.16841,-7.0849], [38.16996,-7.08679], [38.17496,-7.08765], [38.1784,-7.08971], [38.17873,-7.09846], [38.18325,-7.10181], [38.1867,-7.10336], [38.18771,-7.10851], [38.19081,-7.10825], [38.19337,-7.10791], [38.19277,-7.11082], [38.19911,-7.11074], [38.20342,-7.114], [38.20619,-7.1134], [38.20612,-7.11657], [38.21105,-7.11863], [38.21253,-7.1231], [38.21644,-7.12464], [38.22784,-7.13546], [38.2358,-7.14078], [38.23762,-7.1407], [38.24106,-7.14362], [38.25164,-7.14508], [38.25609,-7.14396], [38.25791,-7.14568], [38.26296,-7.14379], [38.26209,-7.14868], [38.26707,-7.14834], [38.26714,-7.15229], [38.27011,-7.15426], [38.27536,-7.1534], [38.27617,-7.15598], [38.27873,-7.15632], [38.27934,-7.16258], [38.28116,-7.16413], [38.27813,-7.16902], [38.27934,-7.171], [38.28399,-7.16859], [38.28432,-7.17143], [38.28818,-7.17603], [38.29283,-7.17869], [38.29607,-7.18324], [38.3028,-7.18667], [38.30819,-7.19191], [38.32078,-7.19963], [38.32792,-7.20169], [38.34098,-7.21517], [38.3424,-7.22023], [38.35781,-7.23362], [38.36515,-7.24392], [38.37033,-7.24959], [38.38056,-7.25748], [38.3819,-7.26066], [38.39482,-7.27199], [38.40168,-7.27534], [38.41654,-7.28169], [38.41943,-7.28057], [38.4189,-7.28426], [38.42313,-7.28529], [38.42239,-7.28821], [38.42448,-7.28881], [38.42347,-7.29276], [38.42555,-7.29422], [38.42576,-7.30031], [38.42898,-7.30126], [38.42992,-7.3034], [38.43154,-7.30452], [38.431,-7.30718], [38.43396,-7.30821], [38.43624,-7.31147], [38.43524,-7.31465], [38.43974,-7.31525], [38.43961,-7.32357], [38.4386,-7.32855], [38.43725,-7.32769], [38.4349,-7.33722], [38.44666,-7.32855], [38.45312,-7.31379], [38.46421,-7.31096], [38.46858,-7.29877], [38.48101,-7.29499], [38.48215,-7.30718], [38.47449,-7.31576], [38.4763,-7.32143], [38.48867,-7.32297], [38.50318,-7.3149], [38.51634,-7.31422], [38.52178,-7.30263], [38.54642,-7.30229], [38.55817,-7.28727], [38.58286,-7.27096], [38.59064,-7.2616], [38.61493,-7.25577], [38.62358,-7.24324], [38.6284,-7.24658], [38.62814,-7.26632], [38.64684,-7.27036], [38.7113,-7.26057], [38.73279,-7.24607], [38.74471,-7.20993], [38.76064,-7.195], [38.76907,-7.19079], [38.77918,-7.16358], [38.78533,-7.15869], [38.79256,-7.15509], [38.80186,-7.14582], [38.81577,-7.12462], [38.81711,-7.10565], [38.81617,-7.10067], [38.81483,-7.09904], [38.81584,-7.09672], [38.82045,-7.08943], [38.82961,-7.08591], [38.84178,-7.07715], [38.84806,-7.07449], [38.85475,-7.06857], [38.85515,-7.06428], [38.85889,-7.06102], [38.85856,-7.05278], [38.8605,-7.05158], [38.86544,-7.04557], [38.86524,-7.04256], [38.86898,-7.04042], [38.87453,-7.03664], [38.87967,-7.03415], [38.88302,-7.03595], [38.88315,-7.04162], [38.88749,-7.03964], [38.89699,-7.04179], [38.90173,-7.04556], [38.90213,-7.04857], [38.90701,-7.05294], [38.91376,-7.0423], [38.92257,-7.02822], [38.94106,-7.0205], [38.95528,-7.00805], [38.96463,-6.99793], [38.97337,-6.99218], [38.97804,-6.98617], [38.98171,-6.98291], [38.98598,-6.98213], [38.99645,-6.97424], [38.99945,-6.97132], [39.00366,-6.96995], [39.01299,-6.96325], [39.0196,-6.9575], [39.02346,-6.95184], [39.02686,-6.95518], [39.0344,-6.96299], [39.03933,-6.96823], [39.04613,-6.96522], [39.0546,-6.96007], [39.06186,-6.96402], [39.06693,-6.96934], [39.07386,-6.97166], [39.08092,-6.97793], [39.08765,-6.98265], [39.09911,-6.99672], [39.1039,-7.00943], [39.1087,-7.01544], [39.11089,-7.02084], [39.11636,-7.03071], [39.11775,-7.03998], [39.11709,-7.05363], [39.11529,-7.05578], [39.11223,-7.0647], [39.11276,-7.06891], [39.10903,-7.07723], [39.1053,-7.098], [39.10304,-7.10144], [39.09851,-7.10479], [39.10397,-7.12247], [39.10816,-7.14513], [39.11409,-7.14899], [39.12222,-7.1495], [39.12781,-7.14513], [39.1312,-7.14461], [39.13986,-7.14238], [39.14432,-7.1368], [39.14711,-7.13723], [39.15044,-7.14178], [39.1573,-7.13551], [39.1587,-7.13594], [39.16535,-7.13388], [39.17107,-7.13534], [39.17227,-7.14092], [39.17141,-7.14736], [39.17247,-7.15062], [39.1742,-7.15191], [39.17553,-7.15774], [39.17906,-7.16281], [39.18099,-7.16693], [39.17986,-7.17276], [39.18059,-7.17963], [39.18372,-7.18907], [39.1867,-7.19422], [39.18544,-7.20143], [39.18723,-7.20958], [39.1893,-7.21242], [39.19296,-7.22254], [39.19775,-7.22606], [39.20127,-7.22958], [39.20812,-7.24246], [39.21876,-7.24048], [39.22667,-7.24598], [39.23306,-7.24486], [39.23465,-7.24254], [39.24263,-7.2428], [39.24602,-7.24649], [39.2536,-7.24864], [39.27885,-7.23216], [39.27971,-7.23585], [39.28376,-7.24271], [39.29253,-7.25516], [39.29771,-7.26254], [39.30429,-7.27087], [39.30927,-7.26924], [39.3113,-7.27339], [39.3196,-7.28137], [39.32266,-7.28893], [39.3285,-7.29287], [39.33076,-7.30197], [39.33906,-7.31055], [39.34211,-7.31055], [39.35226,-7.30635], [39.35698,-7.30721], [39.36105,-7.31101], [39.36981,-7.31144], [39.37147,-7.31315], [39.37187,-7.31676], [39.37764,-7.31813], [39.3785,-7.32242], [39.38447,-7.32354], [39.38772,-7.32122], [39.39084,-7.31753], [39.40013,-7.31358], [39.399,-7.31067], [39.40298,-7.30775], [39.40431,-7.30955], [39.41187,-7.30577], [39.41193,-7.30328], [39.41478,-7.30397], [39.41691,-7.30131], [39.41883,-7.3038], [39.42294,-7.30277], [39.42957,-7.30929], [39.43792,-7.30577], [39.43985,-7.3068], [39.44601,-7.30594], [39.45661,-7.29479], [39.46291,-7.30062], [39.46284,-7.30217], [39.46476,-7.30758], [39.46695,-7.30972], [39.46695,-7.31367], [39.46967,-7.31985], [39.47397,-7.32182], [39.47609,-7.33367], [39.47848,-7.3383], [39.47735,-7.34457], [39.48332,-7.34792], [39.48789,-7.3486], [39.48404,-7.35452], [39.48292,-7.36019], [39.48093,-7.36182], [39.48186,-7.36543], [39.4853,-7.36543], [39.48782,-7.37306], [39.48881,-7.37813], [39.49179,-7.38319], [39.49577,-7.37881], [39.49848,-7.38379], [39.49776,-7.38697], [39.50286,-7.39117], [39.50961,-7.38997], [39.51319,-7.38954], [39.52504,-7.38972], [39.52687,-7.39379], [39.52991,-7.3913], [39.53329,-7.40031], [39.52978,-7.40572], [39.53196,-7.40941], [39.5311,-7.41893], [39.53355,-7.42082], [39.53382,-7.42383], [39.53243,-7.42623], [39.53276,-7.42829], [39.53547,-7.43215], [39.53792,-7.4337], [39.53997,-7.43902], [39.54368,-7.44331], [39.54646,-7.44417], [39.54798,-7.44743], [39.55334,-7.44898], [39.56148,-7.45275], [39.56584,-7.46057], [39.57146,-7.46169], [39.57517,-7.46761], [39.57781,-7.47096], [39.57781,-7.47894], [39.58555,-7.48847], [39.58536,-7.49576], [39.58965,-7.50091], [39.59891,-7.50177], [39.60123,-7.50452], [39.60784,-7.50898], [39.61855,-7.51044], [39.62622,-7.52237], [39.63598,-7.52891], [39.64292,-7.52539], [39.64735,-7.52822], [39.6564,-7.52848], [39.65891,-7.53217], [39.66135,-7.53295], [39.66208,-7.53818], [39.66413,-7.54153], [39.66737,-7.53303], [39.66538,-7.48814], [39.66268,-7.4763], [39.66221,-7.45407], [39.65765,-7.43553], [39.65237,-7.42746], [39.64701,-7.4048], [39.64807,-7.39373], [39.65138,-7.37811], [39.64107,-7.3321], [39.64992,-7.31408], [39.65583,-7.2919], [39.66006,-7.28743], [39.66608,-7.25662], [39.6668,-7.24666], [39.65967,-7.21473], [39.66185,-7.20555], [39.66178,-7.19954], [39.65623,-7.16959], [39.65398,-7.15542], [39.65407,-7.14171], [39.66332,-7.12695], [39.66319,-7.11699], [39.66438,-7.10626], [39.66207,-7.09425], [39.66359,-7.09099], [39.65843,-7.07305], [39.65791,-7.06404], [39.66498,-7.03957], [39.67033,-7.01554], [39.67944,-7.01443], [39.68493,-7.00739], [39.68939,-7.00726], [39.69771,-7.00486], [39.70141,-7.00623], [39.71554,-6.99919], [39.72201,-6.99456], [39.72795,-6.98906], [39.73178,-6.99713], [39.74326,-6.99473], [39.75475,-6.98889], [39.76227,-6.98872], [39.77217,-6.97979], [39.77335,-6.97756], [39.77982,-6.97945], [39.7818,-6.98254], [39.79169,-6.98494], [39.79433,-6.99061], [39.80158,-6.98803], [39.80897,-6.98803], [39.8207,-6.98151], [39.82624,-6.96829], [39.82492,-6.95679], [39.82914,-6.94821], [39.83613,-6.94563], [39.83586,-6.94031], [39.8443,-6.93636], [39.85234,-6.93276], [39.85893,-6.92298], [39.85985,-6.91559], [39.87039,-6.90735], [39.87144,-6.90426], [39.87763,-6.90461], [39.88607,-6.90341], [39.88962,-6.90667], [39.89528,-6.90392], [39.90143,-6.90106], [39.90564,-6.90364], [39.91183,-6.90003], [39.91855,-6.90999], [39.92934,-6.90364], [39.93355,-6.89849], [39.93355,-6.89437], [39.9404,-6.88973], [39.94329,-6.88458], [39.95316,-6.88613], [39.96356,-6.89042], [39.97106,-6.88149], [39.97948,-6.88819], [39.99374,-6.87669], [40.00084,-6.87308], [40.00478,-6.876], [40.0086,-6.87497], [40.0111,-6.86381], [40.0153,-6.8681], [40.01622,-6.87857], [40.02424,-6.87617], [40.03423,-6.88338], [40.04264,-6.88252], [40.04921,-6.89385], [40.05316,-6.89917], [40.06051,-6.89316], [40.06038,-6.90295], [40.0634,-6.90947], [40.06656,-6.90947], [40.06432,-6.91634], [40.06708,-6.91943], [40.08193,-6.91977], [40.08994,-6.92458], [40.09558,-6.93282], [40.10202,-6.93539], [40.1032,-6.94415], [40.10924,-6.94501], [40.11016,-6.95204], [40.11305,-6.95445], [40.11042,-6.96011], [40.11187,-6.96458], [40.11515,-6.9632], [40.11475,-6.97093], [40.11699,-6.97968], [40.11528,-6.98397], [40.11777,-6.98689], [40.11147,-6.98981], [40.11147,-6.9929], [40.11764,-6.99668], [40.12014,-7.0032], [40.12565,-7.01487], [40.14507,-7.02225], [40.15819,-7.01556], [40.16711,-7.02243], [40.17813,-7.02105], [40.18194,-7.02929], [40.19164,-7.03015], [40.19846,-7.02157], [40.22599,-7.01333], [40.23555,-6.99994], [40.24276,-6.97264], [40.23818,-6.96921], [40.23883,-6.96372], [40.24656,-6.962], [40.25902,-6.95288], [40.25928,-6.93039], [40.25561,-6.90807], [40.25862,-6.90447], [40.26242,-6.89108], [40.26019,-6.88335], [40.26465,-6.87082], [40.28089,-6.86361], [40.28691,-6.86791], [40.30014,-6.86396], [40.31519,-6.83941], [40.31964,-6.83203], [40.32762,-6.8183], [40.32566,-6.8025], [40.33144,-6.79369], [40.3389,-6.79249], [40.3567,-6.79626], [40.36481,-6.78304], [40.37043,-6.78631], [40.37043,-6.79437], [40.37945,-6.80399], [40.38495,-6.81257], [40.39148,-6.81514], [40.39867,-6.82819], [40.40939,-6.83712], [40.45134,-6.85102], [40.47537,-6.8378], [40.48385,-6.82459], [40.49495,-6.81858], [40.50696,-6.81429], [40.51153,-6.79661], [40.5268,-6.80227], [40.53554,-6.80776], [40.5478,-6.80467], [40.5538,-6.80931], [40.55758,-6.82562], [40.56241,-6.83317], [40.56554,-6.84793], [40.58588,-6.83866], [40.59174,-6.83969], [40.5967,-6.8366], [40.61142,-6.82167], [40.64295,-6.8033], [40.66301,-6.79609], [40.66783,-6.80708], [40.68397,-6.80485], [40.6992,-6.81], [40.70805,-6.81446], [40.72041,-6.81326], [40.72978,-6.82579], [40.73771,-6.82888], [40.74669,-6.83128], [40.76138,-6.83162], [40.77919,-6.82871], [40.78738,-6.82562], [40.79856,-6.81995], [40.80986,-6.81995], [40.81791,-6.8251], [40.82701,-6.82682], [40.83805,-6.82356], [40.83948,-6.82802], [40.84792,-6.82647], [40.84337,-6.81343], [40.8474,-6.80639], [40.84779,-6.80244], [40.85298,-6.80364], [40.86947,-6.80673], [40.88154,-6.81017], [40.88024,-6.8215], [40.88349,-6.82476], [40.88414,-6.83059], [40.89011,-6.83883], [40.90334,-6.85102], [40.92656,-6.84948], [40.93123,-6.85411], [40.94951,-6.85978], [40.95768,-6.86887], [40.96053,-6.87643], [40.97985,-6.89359], [40.99112,-6.90578], [40.99993,-6.91093], [41.00097,-6.92209], [41.01237,-6.92724], [41.01664,-6.93273], [41.02985,-6.93153], [41.038,-6.91741], [41.03781,-6.91234], [41.03496,-6.90539], [41.03295,-6.89535], [41.02751,-6.87809], [41.02712,-6.86041], [41.02784,-6.83441], [41.03645,-6.81123], [41.04079,-6.8072], [41.04325,-6.81037], [41.04616,-6.80806], [41.04791,-6.80299], [41.05878,-6.7878], [41.08861,-6.76849], [41.09352,-6.76248], [41.10543,-6.75501], [41.10704,-6.75991], [41.1144,-6.76194], [41.11737,-6.7652], [41.12487,-6.77103], [41.13405,-6.76932], [41.13994,-6.75704], [41.14013,-6.7537], [41.14659,-6.74606], [41.1508,-6.73971], [41.15926,-6.73421], [41.16404,-6.72795], [41.16727,-6.71765], [41.17451,-6.70829], [41.17671,-6.70924], [41.18149,-6.69988], [41.18762,-6.69705], [41.19279,-6.69971], [41.19337,-6.6919], [41.20254,-6.68855], [41.20764,-6.69233], [41.21068,-6.69078], [41.21191,-6.68366], [41.22011,-6.6804], [41.22411,-6.67087], [41.23321,-6.66177], [41.23568,-6.65233], [41.24511,-6.65018], [41.24808,-6.6477], [41.24724,-6.64091], [41.24298,-6.63491], [41.24272,-6.62873], [41.24795,-6.61997], [41.24982,-6.60761], [41.24472,-6.60298], [41.24362,-6.6004], [41.24446,-6.59766], [41.25311,-6.59534], [41.25556,-6.59165], [41.25259,-6.58693], [41.24769,-6.58701], [41.24233,-6.58607], [41.23891,-6.58058], [41.23904,-6.57028], [41.24304,-6.56573], [41.2444,-6.55397], [41.24633,-6.55105], [41.25317,-6.54865], [41.25872,-6.54702], [41.26111,-6.53972], [41.27066,-6.52521], [41.27453,-6.51723], [41.26685,-6.51406], [41.26388,-6.51054], [41.26601,-6.50401], [41.26537,-6.49775], [41.27001,-6.49114], [41.27343,-6.48067], [41.27646,-6.47869], [41.28156,-6.48539], [41.28317,-6.48985], [41.28556,-6.49166], [41.28891,-6.49002], [41.29317,-6.48256], [41.295,-6.47694], [41.29803,-6.47523], [41.30132,-6.46836], [41.29783,-6.459], [41.2997,-6.44673], [41.30647,-6.4366], [41.31079,-6.43961], [41.3195,-6.43394], [41.32601,-6.41849], [41.32936,-6.41995], [41.33194,-6.42673], [41.33645,-6.4257], [41.34386,-6.41926], [41.34669,-6.41617], [41.34888,-6.41489], [41.35101,-6.39695], [41.35069,-6.39163], [41.35565,-6.38167], [41.35971,-6.37755], [41.36351,-6.37712], [41.36383,-6.3815], [41.36441,-6.38828], [41.36989,-6.39386], [41.37987,-6.39257], [41.38412,-6.39111], [41.38747,-6.38407], [41.38773,-6.37772], [41.38843,-6.37523], [41.39288,-6.37111], [41.39352,-6.36562], [41.38779,-6.36614], [41.3827,-6.36056], [41.37974,-6.35609], [41.37852,-6.35051], [41.38,-6.34004], [41.38373,-6.33266], [41.38676,-6.32511], [41.38637,-6.31644], [41.39172,-6.31567], [41.39449,-6.31867], [41.39893,-6.31816], [41.40356,-6.32554], [41.4046,-6.33232], [41.40878,-6.33369], [41.41213,-6.33172], [41.41657,-6.32648], [41.41528,-6.31893], [41.41876,-6.31086], [41.42771,-6.30262], [41.43517,-6.29498], [41.44122,-6.29824], [41.44637,-6.30554], [41.45029,-6.30571], [41.45666,-6.29902], [41.46039,-6.2955], [41.4656,-6.28717], [41.47029,-6.28511], [41.4764,-6.28588], [41.47981,-6.28357], [41.48399,-6.27387], [41.48727,-6.26709], [41.48695,-6.26159], [41.49531,-6.26837], [41.49904,-6.26451], [41.49691,-6.25747], [41.50077,-6.25026], [41.50919,-6.25601], [41.5126,-6.2585], [41.51446,-6.2573], [41.51568,-6.24477], [41.51993,-6.2422], [41.52172,-6.23687], [41.52558,-6.23421], [41.53644,-6.22409], [41.53882,-6.22031], [41.54505,-6.21713], [41.55166,-6.21799], [41.56213,-6.20992], [41.56913,-6.20065], [41.57523,-6.18992], [41.5839,-6.19602], [41.58974,-6.19808], [41.59693,-6.20563], [41.59873,-6.21052], [41.6011,-6.2252], [41.60483,-6.23378], [41.61137,-6.23893], [41.63287,-6.25481], [41.6389,-6.264], [41.65038,-6.28211], [41.65782,-6.29455], [41.66333,-6.31112], [41.67551,-6.35412], [41.67365,-6.3754], [41.67712,-6.39678], [41.68038,-6.4069], [41.67808,-6.4124], [41.67915,-6.42707], [41.68049,-6.43669], [41.68389,-6.44149], [41.68434,-6.4463], [41.68235,-6.44973], [41.67992,-6.45162], [41.67556,-6.45154], [41.66562,-6.45694], [41.66536,-6.47008], [41.66267,-6.47634], [41.65959,-6.48089], [41.65645,-6.49042], [41.65664,-6.50123], [41.66139,-6.51479], [41.66889,-6.52037], [41.67543,-6.52999], [41.67786,-6.53805], [41.68524,-6.54921], [41.69344,-6.55428], [41.70049,-6.55591], [41.7028,-6.55247], [41.70325,-6.54861], [41.70805,-6.54827], [41.71145,-6.55076], [41.7183,-6.55591], [41.72971,-6.55831], [41.73697,-6.55796], [41.74094,-6.56277], [41.74107,-6.57067], [41.7508,-6.56706], [41.75541,-6.55865], [41.76079,-6.55625], [41.76962,-6.55608], [41.77782,-6.54921], [41.78844,-6.54526], [41.79458,-6.54887], [41.81672,-6.53857], [41.82939,-6.5305], [41.8345,-6.53342], [41.84371,-6.52827], [41.8487,-6.52998], [41.85599,-6.52483], [41.8602,-6.52655], [41.8735,-6.51659], [41.88015,-6.56363], [41.88321,-6.57255], [41.89586,-6.56483], [41.91171,-6.55814], [41.93023,-6.55007], [41.93419,-6.54612], [41.94415,-6.55144], [41.95972,-6.57461], [41.96649,-6.58818], [41.95449,-6.59195], [41.94683,-6.59933], [41.94708,-6.60637], [41.94223,-6.61616], [41.93917,-6.62096], [41.94095,-6.63676], [41.93227,-6.69976], [41.94033,-6.74421], [41.94428,-6.75211], [41.97747,-6.76996], [41.98347,-6.77082], [41.98883,-6.78507], [41.98806,-6.80069], [41.99215,-6.81082], [41.96854,-6.8091], [41.94543,-6.82095], [41.94275,-6.82936], [41.94211,-6.8503], [41.94722,-6.86884], [41.94275,-6.87656], [41.93956,-6.88738], [41.93969,-6.89596], [41.94301,-6.91502], [41.94454,-6.93544], [41.94313,-6.94471], [41.96803,-6.95828], [41.97288,-6.98179], [41.96228,-6.99724], [41.9499,-7.00686], [41.94926,-7.01201], [41.95054,-7.03672], [41.95373,-7.04617], [41.94926,-7.04908], [41.94888,-7.06745], [41.95041,-7.07792], [41.96828,-7.08651], [41.97364,-7.09063], [41.98347,-7.11535], [41.98628,-7.12101], [41.98781,-7.13474], [41.98998,-7.14127], [41.98628,-7.15225], [41.97671,-7.15551], [41.9753,-7.16032], [41.97888,-7.16581], [41.97964,-7.17852], [41.96867,-7.18538], [41.95463,-7.18195], [41.94875,-7.18212], [41.93892,-7.18504], [41.93739,-7.18212], [41.91836,-7.17251], [41.91224,-7.1811], [41.89512,-7.18419], [41.87928,-7.19621], [41.87762,-7.21115], [41.86637,-7.23192], [41.86688,-7.24754], [41.86202,-7.26247], [41.85205,-7.2829], [41.85,-7.30127], [41.8422,-7.31225], [41.84374,-7.3265], [41.84425,-7.34075], [41.83926,-7.35654], [41.85166,-7.36513], [41.848,-7.36925], [41.83969,-7.38951], [41.8333,-7.39208], [41.82626,-7.39706], [41.82498,-7.40204], [41.8214,-7.40221], [41.81053,-7.41852], [41.80643,-7.43036], [41.81283,-7.42933], [41.81603,-7.42624], [41.82179,-7.43311], [41.83023,-7.4271], [41.83496,-7.43551], [41.8388,-7.44461], [41.84941,-7.44907], [41.85836,-7.44839], [41.86437,-7.45371], [41.86079,-7.48461], [41.87051,-7.49371], [41.8636,-7.5107], [41.85874,-7.51019], [41.85069,-7.50332], [41.84596,-7.51156], [41.83547,-7.53765], [41.83291,-7.5531], [41.8324,-7.56563], [41.82946,-7.57318], [41.83074,-7.59155], [41.83189,-7.5967], [41.82882,-7.6149], [41.8356,-7.61576], [41.84724,-7.61215], [41.86309,-7.60048], [41.86629,-7.60305], [41.86974,-7.60117], [41.87217,-7.59087], [41.87945,-7.58348], [41.87945,-7.59653], [41.87843,-7.61044], [41.88418,-7.61799], [41.87881,-7.6252], [41.8809,-7.65564], [41.88768,-7.66714], [41.89215,-7.67144], [41.89266,-7.67933], [41.89688,-7.68483], [41.90352,-7.69255], [41.90672,-7.7001], [41.90506,-7.7116], [41.89215,-7.73032], [41.89279,-7.74645], [41.89828,-7.75572], [41.89777,-7.7643], [41.88666,-7.77649], [41.88218,-7.79366], [41.88039,-7.84413], [41.86544,-7.84104], [41.86096,-7.84979], [41.86096,-7.85803], [41.85547,-7.86799], [41.84357,-7.87188], [41.84652,-7.87652], [41.85713,-7.88321], [41.85521,-7.8887], [41.85853,-7.89334], [41.87375,-7.88682], [41.89701,-7.8863], [41.90825,-7.88905], [41.91949,-7.88441], [41.92524,-7.88733], [41.92664,-7.90604], [41.91962,-7.90965], [41.90659,-7.90827], [41.87912,-7.91926], [41.87681,-7.92235], [41.87515,-7.93557], [41.87004,-7.94467], [41.87311,-7.95771], [41.87375,-7.97127], [41.87285,-7.97591], [41.86825,-7.98758], [41.85815,-7.98792], [41.85214,-7.9941], [41.84805,-8.00492], [41.82823,-8.0135], [41.82989,-8.02106], [41.82797,-8.03874], [41.82349,-8.04097], [41.81556,-8.05625], [41.81543,-8.06826], [41.81262,-8.07273], [41.81044,-8.08491], [41.81185,-8.09023], [41.80699,-8.0935], [41.8116,-8.1086], [41.81083,-8.12182], [41.8075,-8.1244], [41.8084,-8.13161], [41.81748,-8.15461], [41.81748,-8.16559], [41.86045,-8.16285], [41.86173,-8.16731], [41.87835,-8.17109], [41.87515,-8.1898], [41.87362,-8.19924], [41.88883,-8.20096], [41.89943,-8.21658], [41.9108,-8.21692], [41.91425,-8.21812], [41.92396,-8.21108], [41.92703,-8.20473], [41.93328,-8.20233], [41.94056,-8.19821], [41.95027,-8.18637], [41.95614,-8.17795], [41.96354,-8.17383], [41.96571,-8.16954], [41.98332,-8.16388], [41.98919,-8.14122], [42.00744,-8.12766], [42.0054,-8.11547], [42.00769,-8.11032], [42.01075,-8.09659], [42.01675,-8.08646], [42.02886,-8.08371], [42.04799,-8.0856], [42.05997,-8.09144], [42.07182,-8.09727], [42.08201,-8.12045], [42.07475,-8.13641], [42.07857,-8.14894], [42.07411,-8.15959], [42.06519,-8.17109], [42.06481,-8.18225], [42.06608,-8.18431], [42.075,-8.18946], [42.08685,-8.1874], [42.09297,-8.18963], [42.10278,-8.18877], [42.11678,-8.19375], [42.13079,-8.19358], [42.13626,-8.1898], [42.14479,-8.1934], [42.14886,-8.19666], [42.15421,-8.19993], [42.14657,-8.20078], [42.13906,-8.20748], [42.13817,-8.21778], [42.13321,-8.2219], [42.1327,-8.231], [42.13894,-8.24181], [42.13754,-8.24885], [42.13334,-8.25589], [42.1257,-8.25486], [42.11984,-8.26069], [42.12162,-8.26808], [42.12264,-8.27254], [42.11538,-8.2873], [42.10647,-8.29795], [42.10252,-8.30739], [42.10252,-8.31889], [42.09934,-8.32507], [42.08978,-8.32369], [42.08252,-8.33245], [42.08418,-8.34515], [42.08876,-8.35288], [42.08889,-8.3606], [42.08736,-8.37056], [42.07865,-8.37819], [42.07623,-8.38231], [42.07546,-8.3909], [42.07941,-8.39416], [42.08056,-8.40497], [42.07355,-8.41836], [42.07202,-8.43038], [42.07406,-8.43312], [42.07992,-8.43776], [42.08247,-8.44651], [42.08133,-8.46282], [42.08056,-8.48102], [42.08273,-8.48462], [42.07725,-8.50505], [42.0775,-8.51758], [42.0775,-8.52393], [42.07394,-8.52874], [42.06361,-8.52582], [42.0603,-8.53046], [42.05456,-8.54676], [42.0524,-8.56307], [42.05189,-8.58436], [42.05597,-8.59363], [42.05597,-8.59878], [42.04806,-8.63654], [42.0357,-8.64736], [42.03289,-8.65577], [42.0283,-8.6592], [42.02014,-8.65766], [42.00535,-8.66075], [41.99808,-8.67105], [41.99017,-8.68015], [41.99029,-8.6901], [41.98264,-8.70074], [41.97932,-8.7198], [41.96554,-8.74486], [41.95864,-8.74898], [41.94664,-8.74641], [41.9363,-8.75293], [41.92659,-8.76752], [41.91574,-8.78932], [41.9151,-8.80597], [41.91101,-8.82022], [41.90143,-8.8264], [41.85209,-8.89215], [42.96681,-10.741], [45.62003,-8.33781], [45.35237,-3.32255]]

    const challenge_start_time = 1684902188;// 1684929600;
    const challenge_end_time = 1686182399;

    let current_lat;
    let current_lng;

    // https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js
    const cyrb53 = function(str, seed = 0) {
        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
        for (let i = 0, ch; i < str.length; i++) {
            ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);
        h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);
        return 4294967296 * (2097151 & h2) + (h1>>>0);
    };

    // Overwrite the open method of the XMLHttpRequest.prototype to intercept the server calls
    (function (open) {
        XMLHttpRequest.prototype.open = function(method, url) {
            const args = this;
            if (url == '/api/v1/vault/review' && method == 'GET') {
                this.addEventListener('load', handleXHRResult(handleIncomingReview), false);
            } else if (url == '/api/v1/vault/properties' && method == 'GET') {
                // NOTE: Requires @run-at document-start.
                this.addEventListener('load', handleXHRResult(handleProfile), false);
            } else if (url == '/api/v1/vault/profile' && method == 'GET') {
                this.addEventListener('load', addRHButtons, false);
                this.addEventListener('load', addSettings, false);
            }
            open.apply(this, arguments);
        };
    })(XMLHttpRequest.prototype.open);

    // Overwrite the send method of the XMLHttpRequest.prototype to intercept POST data
    (function (send) {
        XMLHttpRequest.prototype.send = function(dataText) {
            try {
                const data = JSON.parse(dataText);
                const xhr = this;
                this.addEventListener('load', handleXHRResult(function(result) {
                    if (xhr.responseURL == window.origin + '/api/v1/vault/review') {
                        handleSubmittedReview(data, result).catch(console.error);
                    }
                }), false);
            } catch (err) { }
            send.apply(this, arguments);
        };
    })(XMLHttpRequest.prototype.send);

    // Perform validation on result to ensure the request was successful before it's processed further.
    // If validation passes, passes the result to callback function.
    const handleXHRResult = callback => function(e) {
        try {
            const response = this.response;
            const json = JSON.parse(response);
            if (!json) return;
            if (json.captcha) return;
            if (!json.result) return;
            callback(json.result, e);
        } catch (err) {
            console.error(err);
        }
    };

    // Get a user ID to properly handle browsers shared between several users. Store a hash only, for privacy.
    const handleProfile = ({ socialProfile }) => {
        if (socialProfile.email) userHash = cyrb53(socialProfile.email);
    };

    const handleIncomingReview = result => new Promise((resolve, reject) => {
        let saveColumns = [];
        const common = ['type', 'id', 'title', 'description', 'lat', 'lng'];
        switch (result.type) {
            case 'NEW':
                saveColumns = [...common, 'imageUrl', 'statement', 'supportingImageUrl'];
                current_lat = result['lat'];
                current_lng = result['lng'];
                break;
            case 'EDIT':
                saveColumns = [...common, 'descriptionEdits', 'titleEdits', 'locationEdits'];
                break;
            case 'PHOTO':
                saveColumns = [...common, 'newPhotos'];
                break;
        }
        if (saveColumns.length) {
            const saveData = { ...filterObject(result, saveColumns), ts: Date.now(), userHash, review: null };
            getIDBInstance().then(db => {
                const tx = db.transaction([OBJECT_STORE_NAME], "readwrite");
                tx.oncomplete = event => { db.close(); resolve(); };
                tx.onerror = reject;
                const objectStore = tx.objectStore(OBJECT_STORE_NAME);
                objectStore.put(saveData);
                tx.commit();
            }).catch(reject);
        } else {
            reject('Unknown review type: ' + result.type);
        }
        renderCounter();
    });

    function checkChallenge() {
        console.log("entered check challenge")
        const currentTime = Date.now() / 1000;
        if (challenge_start_time < currentTime && currentTime < challenge_end_time) {
            if (isWithinBounds(challenge_geofence)) {
                const userId = getUserId();
                let challengeReviewCount = localStorage["wfrh_challenge_review_count_" + userId];
                if (challengeReviewCount === undefined || challengeReviewCount === null || challengeReviewCount === "" || challengeReviewCount === "false"){
                    challengeReviewCount = 0;
                }
                challengeReviewCount = parseInt(challengeReviewCount) + 1
                localStorage["wfrh_challenge_review_count_" + userId] = challengeReviewCount;
                console.log(`current challenge review count: ${challengeReviewCount}`);
            }
        }
    }

    function renderCounter() {
        console.log("entered rendercounter")
        const currentTime = Date.now() / 1000;
        if (challenge_start_time < currentTime && currentTime < challenge_end_time) {
            const userId = getUserId();
            let challengeReviewCount = localStorage["wfrh_challenge_review_count_" + userId];
            if (challengeReviewCount === undefined || challengeReviewCount === null || challengeReviewCount === "" || challengeReviewCount === "false"){
                challengeReviewCount = 0;
            }
            challengeReviewCount = parseInt(challengeReviewCount);

            awaitElement(() => document.querySelector('wf-logo')).then(ref => {
                if (document.querySelector('.wfrh_challenge_count') === null) {
                    const div = document.createElement('div');
                    div.className = 'wfrh_challenge_count';

                    let countLabel = document.createElement('p');
                    countLabel.textContent = 'Challenge Reviews: ';
                    let countNumber = document.createElement('p');

                    countNumber.textContent = challengeReviewCount;

                    div.appendChild(countLabel);
                    div.appendChild(countNumber);

                    const container = ref.parentNode.parentNode;
                    container.appendChild(div);
                } else {
                    console.log('debug here')
                    document.querySelector('.wfrh_challenge_count').innerText = challengeReviewCount;
                }
            });
        }
    }

    const isWithinBounds = (geofence) => {
            let inside = false;
            const count = geofence.length;
            for (let b = 0, a = count - 1; b < count; a = b++) {
                const [ aLat, aLng ] = geofence[a], [ bLat, bLng ] = geofence[b];
                if (aLng > current_lng != bLng > current_lng && current_lat > (aLat - bLat) * (current_lng - bLng) / (aLng - bLng) + bLat) {
                    inside = !inside;
                }
            }
            return inside;
        }

    const handleSubmittedReview = (review, response) => new Promise((resolve, reject) => {
        console.log("entered handleSubmittedReview")
        if (response === 'api.review.post.accepted' && review.hasOwnProperty('id')) {
            checkChallenge();
            getIDBInstance().then(db => {
                const tx = db.transaction([OBJECT_STORE_NAME], "readwrite");
                tx.oncomplete = event => { db.close(); resolve(); };
                tx.onerror = reject;
                const objectStore = tx.objectStore(OBJECT_STORE_NAME);
                const getReview = objectStore.get(review.id);
                getReview.onsuccess = () => {
                    const { result } = getReview;
                    objectStore.put({ ...result, review });
                    tx.commit();
                };
                getReview.onerror = reject;
            }).catch(reject);
        }
    });

    const awaitElement = get => new Promise((resolve, reject) => {
        let triesLeft = 10;
        const queryLoop = () => {
            const ref = get();
            if (ref) resolve(ref);
            else if (!triesLeft) reject();
            else setTimeout(queryLoop, 100);
            triesLeft--;
        }
        queryLoop();
    });

    const addRHButtons = () => awaitElement(() => document.querySelector('wf-rating-bar')).then(ref => {
        const outer = document.createElement('div');
        outer.id = 'wfrh-idb-topbar';
        outer.classList.add('wfrh-idb');
        const label = document.createElement('p');
        label.textContent = 'Review history:';
        const exportBtn = document.createElement('button');
        exportBtn.textContent = 'Export';
        exportBtn.addEventListener('click', () => getIDBInstance().then(db => {
            const tx = db.transaction([OBJECT_STORE_NAME], 'readonly');
            tx.oncomplete = event => db.close();
            const objectStore = tx.objectStore(OBJECT_STORE_NAME);
            const getAllReviews = objectStore.getAll();
            getAllReviews.onsuccess = () => {
                const { result } = getAllReviews;
                const toSave = [];
                for (let i = 0; i < result.length; i++) {
                    if (result[i].userHash == userHash) {
                        toSave.push({ ...result[i], userHash: undefined });
                    }
                }
                const blob = new Blob([JSON.stringify(toSave)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const anchor = document.createElement('a');
                anchor.setAttribute('download', `reviewHistory-${userHash}.json`);
                anchor.href = url;
                anchor.setAttribute('target', '_blank');
                anchor.click();
                URL.revokeObjectURL(url);
            };
        }));

        const importBtn = document.createElement('button');
        importBtn.textContent = 'Import';
        importBtn.addEventListener('click', () => {
            if (confirm('Importing will overwrite all currently stored data, are you sure you want to clear your currently saved review history?')) {
            getIDBInstance().then(db => {
                let data;
                let input = document.createElement('input');
                input.type = 'file';
                input.onchange = (event) => {
                    const reader = new FileReader();

                    reader.onload = function(event) {
                        const clearReviewHistory = new Promise((resolve, reject) => {
                            const tx = db.transaction([OBJECT_STORE_NAME], 'readwrite');
                            const objectStore = tx.objectStore(OBJECT_STORE_NAME);
                            objectStore.clear();
                            let imported = 0;
                            let failed = 0;
                            let filtered = 0;
                            try {
                                data = JSON.parse(event.target.result);
                                for (let i = 0; i < data.length; i++) {
                                    let found = false;
                                    if (!("id" in data[i])) {
                                        if ("review" in data[i]) {
                                            if (data[i].review !== false && data[i].review != "skipped") {
                                                if ("id" in data[i].review) {
                                                    data[i].id = data[i].review.id;
                                                    found = true;
                                                    if (applyFilters(data[i])) {
                                                        objectStore.put(data[i]);
                                                        imported += 1;
                                                    } else {
                                                        filtered += 1;

                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        found = true;
                                        if (applyFilters(data[i])) {
                                            objectStore.put(data[i]);
                                            imported += 1;
                                        } else {
                                            filtered += 1;
                                        }
                                    }
                                    if (!found) {
                                        failed += 1
                                    }
                                }
                            } catch (error) {
                                tx.abort();
                                reject(error);
                            }
                            tx.commit();
                            resolve([imported, failed, filtered]);
                        });

                        clearReviewHistory.then((result) => {
                            let alertText = `Cleared all saved review history.\nImported ${result[0]} review history item(s).`;
                            if (result[2] > 0) {
                                alertText += `\nFiltered ${result[2]} item(s) from import.`;
                            }
                            if (result[1] > 0) {
                                alertText += `\nFailed to import ${result[1]} item(s).`;
                            }
                            db.close();
                            alert(alertText);
                            location.reload();
                        }).catch((error) => {
                            db.close();
                            alert(`Failed to import data with error:\n${error}`);
                            location.reload();
                        })
                    }
                    reader.readAsText(event.target.files[0]);
                }
                input.click();
            }
        )}});

        const clearBtn = document.createElement('button');
        clearBtn.textContent = 'Clear';
        clearBtn.addEventListener('click', () => getIDBInstance().then(db => {
            if (confirm('Are you sure you want to clear your review history?')) {
                const tx = db.transaction([OBJECT_STORE_NAME], 'readwrite');
                tx.oncomplete = event => db.close();
                const objectStore = tx.objectStore(OBJECT_STORE_NAME);
                const clearReviewHistory = objectStore.clear();
                clearReviewHistory.onsuccess = () => {
                    alert("Cleared all saved review history.");
                    location.reload();
                }
            }
        }));

        outer.appendChild(label);
        outer.appendChild(exportBtn);
        outer.appendChild(importBtn);
        outer.appendChild(clearBtn);
        ref.parentNode.appendChild(outer);
    });

    function applyFilters(review) {
        const userId = getUserId();
        console.log("here")
        let dateAfter = localStorage["wfrh_date_after" + userId];
        if (dateAfter === undefined || dateAfter === null || dateAfter === "" || dateAfter === "false") {
            dateAfter = 0;
        } else {
            dateAfter = new Date(dateAfter);
        }
        if (dateAfter !== 0) {
            if (review['ts'] < dateAfter.getTime()) {
                return false;
            }
        }

        let location = localStorage["wfrh_location_" + userId];
        if (location === undefined || location === null || location === "" || location === "false"){
            location = "0,0";
        }
        let range = localStorage["wfrh_range_" + userId];
        if (range === undefined || range === null || range === "" || range === "false" || range === "0"){
            range = 0;
        }

        if (location !== "0,0" && range !== 0) {
            const centerLocation = location.split(",");
            if (centerLocation.length == 2) {
                const reviewDistance = haversineDistance([parseInt(centerLocation[0]), parseInt(centerLocation[1])], [review["lat"], review["lng"]]);
                if (reviewDistance > range) {
                    return false;
                }
            }
        }

        return true;
    }

    function haversineDistance(coords1, coords2) {
        function toRad(x) {
            return x * Math.PI / 180;
        }

        let lat1 = coords1[0];
        let lon1 = coords1[1];

        let lat2 = coords2[0];
        let lon2 = coords2[1];
        let R = 6371; // km

        let x1 = lat2 - lat1;
        let dLat = toRad(x1);
        let x2 = lon2 - lon1;
        let dLon = toRad(x2)
        let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        let d = R * c;

        // returns in kilometers
        return d;
    }

    const addSettings = () => awaitElement(() =>document.querySelector('wf-rating-bar')).then(ref => {
        let settingsDiv = document.getElementById("profileSettings");
        if (settingsDiv === null) {
            settingsDiv = document.createElement('div');
            settingsDiv.id = "profileSettings";
            settingsDiv.classList.add('wayfarerrh__visible');

            const settingsContainer = document.createElement('div');
            settingsContainer.setAttribute('class', 'wrap-collabsible')
            settingsContainer.id = "nomStats";

            const collapsibleInput = document.createElement("input");
            collapsibleInput.id = "collapsed-settings";
            collapsibleInput.setAttribute("class", "toggle");
            collapsibleInput.type = "checkbox";

            const collapsibleLabel = document.createElement("label");
            collapsibleLabel.setAttribute("class", "lbl-toggle-es");
            collapsibleLabel.innerText = "Settings";
            collapsibleLabel.setAttribute("for", "collapsed-settings");

            const collapsibleContent = document.createElement("div");
            collapsibleContent.setAttribute("class", "collapsible-content-es");

            collapsibleContent.appendChild(settingsDiv);
            settingsContainer.appendChild(collapsibleInput);
            settingsContainer.appendChild(collapsibleLabel);
            settingsContainer.appendChild(collapsibleContent);

            const ratingNarRef = document.querySelector('wf-rating-bar');
            const container = ratingNarRef.parentNode.parentNode;
            container.appendChild(settingsContainer);
        }


        const sectionLabel = document.createElement("label");
        sectionLabel.innerText = "Review History Import Settings";
        sectionLabel.classList.add('wayfarerrh__bold');

        let dateInput = document.createElement('input');
        dateInput.setAttribute("type", "date");
        const userId = getUserId();
        console.log("here")
        let dateAfter = localStorage["wfrh_date_after" + userId];
        if (dateAfter === undefined || dateAfter === null || dateAfter === "" || dateAfter === "false") {
            dateAfter = 0;
            dateInput.value = dateAfter;
        } else {
            dateAfter = new Date(dateAfter);
            dateInput.valueAsDate = dateAfter;
        }

        dateInput.addEventListener('change', function () {
            const userId = getUserId();
            dateAfter = new Date(this.value);
            localStorage["wfrh_date_after" + userId] = dateAfter;
        });
        dateInput.id = "wayfarerrhdateafter";
        dateInput.classList.add('wayfarercc_date_input');

        const dateAfterLabel = document.createElement("label");
        dateAfterLabel.innerText = "Import After Date:";
        dateAfterLabel.setAttribute("for", "wayfarerrhdateafter");
        dateAfterLabel.classList.add('wayfareres_settings_label');
        dateAfterLabel.title = "Any reviews in the import file prior to the selected date will not be imported.."

        let locationInput = document.createElement('input');
        let location = localStorage["wfrh_location_" + userId];
        if (location === undefined || location === null || location === "" || location === "false"){
            location = "0,0";
        }
        locationInput.value = location;
        locationInput.addEventListener('change', function () {
            const userId = getUserId();
            location = this.value;
            localStorage["wfrh_location_" + userId] = location;
        });
        locationInput.id = "wayfarerrhlocation";
        locationInput.classList.add('wayfarercc_gps_input');

        const locationLabel = document.createElement("label");
        locationLabel.innerText = "Filter Location Center:";
        locationLabel.setAttribute("for", "wayfarerrhlocation");
        locationLabel.classList.add('wayfareres_settings_label');
        locationLabel.title = "If location and range are set, displayed values will be filtered to those within the given number of kilometers to the location provided."

        let rangeInput = document.createElement('input');
        rangeInput.setAttribute("type", "number");
        rangeInput.setAttribute("size", '4');
        let range = localStorage["wfrh_range_" + userId];
        if (range === undefined || range === null || range === "" || range === "false"){
            range = 0;
        }
        rangeInput.value = range;
        rangeInput.addEventListener('change', function () {
            const userId = getUserId();
            range = this.value;
            localStorage["wfrh_range_" + userId] = range;
        });
        rangeInput.id = "wayfarerrhlocation";
        rangeInput.classList.add('wayfarercc_input');

        const rangeLabel = document.createElement("label");
        rangeLabel.innerText = "Filter Location Range:";
        rangeLabel.setAttribute("for", "wayfarerrhlocation");
        rangeLabel.classList.add('wayfareres_settings_label');
        rangeLabel.title = "If location and range are set, displayed values will be filtered to those within the given number of kilometers to the location provided."


        settingsDiv.appendChild(sectionLabel);
        settingsDiv.appendChild(document.createElement('br'));
        settingsDiv.appendChild(dateAfterLabel);
        settingsDiv.appendChild(dateInput);
        settingsDiv.appendChild(document.createElement('br'));
        settingsDiv.appendChild(locationLabel);
        settingsDiv.appendChild(locationInput);
        settingsDiv.appendChild(document.createElement('br'));
        settingsDiv.appendChild(rangeLabel);
        settingsDiv.appendChild(rangeInput);
        settingsDiv.appendChild(document.createElement('br'));
    })

    function insertAfter(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }

    function getUserId() {
        var els = document.getElementsByTagName("image");
        for (var i = 0; i < els.length; i++) {
           const element = els[i];
           const attribute = element.getAttribute("href");
           let fields = attribute.split('/');
           let userId = fields[fields.length-1];
           fields = userId.split('=');
           userId = fields[0];
           return userId;
        }
        return "temporary_default_userid";
    }

    // Returns an copy of obj containing only the keys specified in the keys array.
    const filterObject = (obj, keys) => Object
        .keys(obj)
        .filter(key => keys.includes(key))
        .reduce((nObj, key) => { nObj[key] = obj[key]; return nObj; }, {});

    // Opens an IDB database connection.
    // IT IS YOUR RESPONSIBILITY TO CLOSE THE RETURNED DATABASE CONNECTION WHEN YOU ARE DONE WITH IT.
    // THIS FUNCTION DOES NOT DO THIS FOR YOU - YOU HAVE TO CALL db.close()!
    const getIDBInstance = version => new Promise((resolve, reject) => {
        'use strict';

        if (!window.indexedDB) {
            reject('This browser doesn\'t support IndexedDB!');
            return;
        }

        const openRequest = indexedDB.open('wayfarer-tools-db', version);
        openRequest.onsuccess = event => {
            const db = event.target.result;
            const dbVer = db.version;
            console.log(`IndexedDB initialization complete (database version ${dbVer}).`);
            if (!db.objectStoreNames.contains(OBJECT_STORE_NAME)) {
                db.close();
                console.log(`Database does not contain column ${OBJECT_STORE_NAME}. Closing and incrementing version.`);
                getIDBInstance(dbVer + 1).then(resolve);
            } else {
                resolve(db);
            }
        };
        openRequest.onupgradeneeded = event => {
            console.log('Upgrading database...');
            const db = event.target.result;
            if (!db.objectStoreNames.contains(OBJECT_STORE_NAME)) {
                db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });
            }
        };
    });

    (() => {
        const css = `
        .wfrh-idb {
            color: #333;
            padding-top: 0.3em;
            text-align: center;
            display: block;
        }

        .dark .wfrh-idb {
            color: #ddd;
        }

        .wfrh-idb button {
            background-color: #e5e5e5;
            border: none;
            color: #ff4713;
            padding: 2px 6px;
            margin: 3px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }

        .dark .wfrh-idb button {
            background-color: #404040;
            color: #20B8E3;
        }

        .wayfarerrh__bold {
            margin:  2px 12px;
            padding: 2px 12px;
            font-size: 1.1em;
            font-weight: bold;
            color: black;
        }

        .wayfarercc_date_input {
            margin:  2px 12px;
            padding: 2px 12px;
            width: 180px;
            background-color: #FFFFFF;
            color: black;
        }

        .wayfarercc_gps_input {
            margin:  2px 12px;
            padding: 2px 12px;
            width: 250px;
            background-color: #FFFFFF;
            color: black;
        }

        .wayfarercc_input {
            margin:  2px 12px;
            padding: 2px 12px;
            background-color: #FFFFFF;
            color: black;
        }

        .wayfareres_settings_label {
            margin:  2px 12px;
            padding: 2px 12px;
            color: black;
            font-size: 16px;
        }

        .wfrh_challenge_count {
            color: #333;
            margin-left: 2em;
            padding-top: 0.3em;
            text-align: center;
            display: block;
        }

        .dark .wfrh_challenge_count {
            color: #ddd;
        }

        .wfrh_challenge_count p:nth-child(2) {
            font-size: 20px;
            color: #20B8E3;
        }
        `;
        const style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = css;
        // We're loading this script on document-start, which means <head> does not exist yet.
        // Wait for it to start existing before we try to add the CSS to it.
        const tryAdd = setInterval(() => {
            const head = document.querySelector('head');
            if (head) {
                clearInterval(tryAdd);
                console.log('Injecting styles...');
                head.appendChild(style);
            }
        }, 100);
    })();
})();
